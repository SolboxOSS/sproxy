# Wedit Makefile for project ansicStl
SRCDIR=.
CFLAGS=-I. -Zi -W4 -D_CRT_SECURE_NO_WARNINGS -c
CC=cl.exe
LINKER=link.exe
OBJS=\
	vector.obj \
	bitstrings.obj \
	bloom.obj \
	error.obj \
	deque.obj \
	dictionary.obj \
	dlist.obj \
	fgetline.obj \
	generic.obj \
	hashtable.obj \
	heap.obj \
	iMask.obj \
	list.obj \
	malloc_debug.obj \
	pool.obj \
	pooldebug.obj \
	qsortex.obj \
	queue.obj \
	redblacktree.obj \
	scapegoat.obj \
	searchtree.obj \
	strcollection.obj \
	observer.obj \
	valarrayuint.obj \
	valarrayint.obj \
	valarrayfloat.obj \
	valarraydouble.obj \
	valarraylongdouble.obj \
	valarraylonglong.obj \
	valarrayshort.obj \
	valarraysize_t.obj \
	memorymanager.obj \
	sequential.obj \
	buffer.obj

EXE=dotest.exe
LIBS=cclmsvc.lib

$(EXE): $(OBJS) Makefile tlist.obj cclmsvc.lib
	$(LINKER) /debug tlist.obj $(LIBS)

cclmsvc.lib: $(OBJS)
	lib /out:cclmsvc.lib $(OBJS)

valarraylongdouble.obj:	valarraygen.c valarraylongdouble.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarraylongdouble.c

valarraydouble.o:	valarraygen.c valarraydouble.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarraydouble.c

valarrayint.obj:	valarraygen.c valarrayint.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarrayint.c

valarrayshort.obj:	valarraygen.c valarrayshort.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarrayshort.c

valarraysize_t.obj:	valarraygen.c valarraysize_t.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarraysize_t.c

valarrayfloat.obj:	valarraygen.c valarrayfloat.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarrayfloat.c

valarrayuint.obj:	valarraygen.c valarrayuint.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarrayuint.c

valarraylonglong.obj:	valarraygen.c valarraylonglong.c containers.h valarraygen.h valarray.h
	$(CC) -c $(CFLAGS) $(SRCDIR)\valarraylonglong.c
generic.obj:	generic.c containers.h
	$(CC) $(CFLAGS) $(SRCDIR)\generic.c

# Build vector.c
ARRAYLIST_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

vector.obj: $(ARRAYLIST_C) $(SRCDIR)\vector.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\vector.c

# Build bitstrings.c
BITSTRINGS_C=\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\string.h\
	C:\lcc\include\limits.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\string.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

bitstrings.obj: $(BITSTRINGS_C) $(SRCDIR)\bitstrings.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\bitstrings.c

# Build bloom.c
BLOOM_C=\
	C:\lcc\include\math.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

bloom.obj: $(BLOOM_C) $(SRCDIR)\bloom.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\bloom.c

# Build error.c
CONTAINERERROR_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	C:\lcc\include\stdio.h\

error.obj: $(CONTAINERERROR_C) $(SRCDIR)\error.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\error.c

# Build deque.c
DEQUE_C=\
	C:\lcc\include\string.h\
	C:\lcc\include\assert.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

deque.obj: $(DEQUE_C) $(SRCDIR)\deque.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\deque.c

# Build dictionary.c
DICTIONARY_C=\
	C:\lcc\include\limits.h\
	C:\lcc\include\stddef.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	C:\lcc\include\assert.h\

dictionary.obj: $(DICTIONARY_C) $(SRCDIR)\dictionary.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\dictionary.c

# Build dlist.c
DLIST_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

dlist.obj: $(DLIST_C) $(SRCDIR)\dlist.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\dlist.c

# Build fgetline.c
FGETLINE_C=\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\limits.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

fgetline.obj: $(FGETLINE_C) $(SRCDIR)\fgetline.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\fgetline.c

# Build hashtable.c
HASHTABLE_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

hashtable.obj: $(HASHTABLE_C) $(SRCDIR)\hashtable.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\hashtable.c

# Build heap.c
HEAP_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

heap.obj: $(HEAP_C) $(SRCDIR)\heap.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\heap.c

# Build list.c
LIST_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

list.obj: $(LIST_C) $(SRCDIR)\list.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\list.c

# Build malloc_debug.c
MALLOC_DEBUG_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

malloc_debug.obj: $(MALLOC_DEBUG_C) $(SRCDIR)\malloc_debug.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\malloc_debug.c

# Build pool.c
POOL_C=\
	C:\lcc\include\inttypes.h\
	C:\lcc\include\stdint.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

pool.obj: $(POOL_C) $(SRCDIR)\pool.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\pool.c

# Build pooldebug.c
POOLDEBUG_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	C:\lcc\include\inttypes.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\stdio.h\

pooldebug.obj: $(POOLDEBUG_C) $(SRCDIR)\pooldebug.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\pooldebug.c

# Build qsortex.c
QSORTEX_C=\
	C:\lcc\include\errno.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

qsortex.obj: $(QSORTEX_C) $(SRCDIR)\qsortex.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\qsortex.c

# Build redblacktree.c
REDBLACKTREE_C=\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	$(SRCDIR)\containers.h\

redblacktree.obj: $(REDBLACKTREE_C) $(SRCDIR)\redblacktree.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\redblacktree.c

# Build scapegoat.c
SCAPEGOAT_C=\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	$(SRCDIR)\containers.h\

scapegoat.obj: $(SCAPEGOAT_C) $(SRCDIR)\scapegoat.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\scapegoat.c

# Build searchtree.c
SEARCHTREE_C=\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stdlib.h\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

searchtree.obj: $(SEARCHTREE_C) $(SRCDIR)\searchtree.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\searchtree.c

# Build strcollection.c
STRCOLLECTION_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\

strcollection.obj: $(STRCOLLECTION_C) $(SRCDIR)\strcollection.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\strcollection.c
memorymanager.obj:	memorymanager.c containers.h
	$(CC) $(CFLAGS) $(SRCDIR)\memorymanager.c
sequential.obj:	sequential.c containers.h
	$(CC) $(CFLAGS) $(SRCDIR)\sequential.c

queue.obj:	containers.h queue.c
	$(CC) -c $(CFLAGS) queue.c

buffer.obj:	buffer.c containers.h
	$(CC) -c $(CFLAGS) buffer.c
observer.obj:	observer.c containers.h
	$(CC) $(CFLAGS) observer.c
iMask.obj:	iMask.c containers.h
	$(CC) $(CFLAGS) iMask.c

# Build test.c
TEST_C=\
	$(SRCDIR)\containers.h\
	C:\lcc\include\string.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdlib.h\
	C:\lcc\include\stddef.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\safelib.h\
	C:\lcc\include\stdint.h\
	C:\lcc\include\limits.h\
	C:\lcc\include\stdio.h\
	C:\lcc\include\stdio.h\

tlist.obj: $(TEST_C) $(SRCDIR)\tlist.c
	$(CC) -c $(CFLAGS) $(SRCDIR)\tlist.c


link:
	$(LINKER)  /out:test.exe $(OBJS) $(LIBS)

clean:
	del $(OBJS) dotest.exe cclmsvc.lib
